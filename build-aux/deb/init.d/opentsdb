#!/bin/sh -e
#
# Modified from original source: Elastic Search
# https://github.com/elasticsearch/elasticsearch
# Thank you to the Elastic Search authors
#
### BEGIN INIT INFO
# Provides:          opentsdb
# Required-Start:    $network $named
# Required-Stop:     $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts OpenTSDB TSD
# Description:       Starts an OpenTSDB time series daemon
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=opentsdb
TSD_USER=mapr
TSD_GROUP=mapr

# Default directories
LOG_DIR=__INSTALL__/var/log/opentsdb
LOCK_DIR=__INSTALL__/var/lock/subsys
PID_DIR=__INSTALL__/var/run/opentsdb

DAEMON=__INSTALL__/share/opentsdb/bin/tsdb
CONFIG=__INSTALL__/etc/opentsdb/${NAME}.conf
DAEMON_OPTS="tsd --config=${CONFIG}"

HOSTNAME=$(hostname --fqdn)
LOG_FILE=${LOG_DIR}/${NAME-$HOSTNAME}-
PID_FILE=${PID_DIR}/$NAME.pid
LOCK_FILE=${LOCK_DIR}/${NAME}

# Maximum number of open files
#MAX_OPEN_FILES=65535
MAX_OPEN_FILES=64000

if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
fi

# The first existing directory is used for JAVA_HOME
# (if JAVA_HOME is not defined in $DEFAULT)
JDK_DIRS="\
  /usr/lib/jvm/java-8-oracle /usr/lib/jvm/java-8-openjdk \
  /usr/lib/jvm/java-8-openjdk-amd64/ /usr/lib/jvm/java-8-openjdk-i386/ \
	\
  /usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-7-openjdk \
  /usr/lib/jvm/java-7-openjdk-amd64/ /usr/lib/jvm/java-7-openjdk-i386/ \
	\
  /usr/lib/jvm/default-java"

# Look for the right JVM to use
for jdir in $JDK_DIRS; do
  if [ -r "$jdir/bin/java" -a -z "${JAVA_HOME}" ]; then
    JAVA_HOME="$jdir"
  fi
done

if [ -r /etc/default/opentsdb ]; then
    . /etc/default/opentsdb
fi

export JAVA_HOME


case "$1" in
start)

  if [ -z "$JAVA_HOME" ]; then
    log_failure_msg "no JDK found - please set JAVA_HOME"
    exit 1
  fi

  log_action_begin_msg "Starting TSD"
  if start-stop-daemon --test --start --pidfile "$PID_FILE" \
    --user "$TSD_USER" --exec "$JAVA_HOME/bin/java" \
    >/dev/null; then

    touch "$PID_FILE" && chown "$TSD_USER":"$TSD_GROUP" "$PID_FILE"

    if [ -n "$MAX_OPEN_FILES" ]; then
      ulimit -n $MAX_OPEN_FILES
    fi

    curulimit="`ulimit -n`"
    if [ "$curulimit" -lt $MAX_OPEN_FILES ] ; then
      echo "'ulimit -n' must be greater than or equal to $MAX_OPEN_FILES, is $curulimit"
      return 1
    fi

    # Set a default value for JVMARGS
    : ${JVMXMX:=-Xmx6000m}
    : ${JVMARGS:=-DLOG_FILE_PREFIX=${LOG_FILE} -enableassertions -enablesystemassertions $JVMXMX -XX:OnOutOfMemoryError=__INSTALL__/share/opentsdb/tools/opentsdb_restart.py}
    export JVMARGS


    if [ "`id -u -n`" = "root" ] ; then
      # Changes the owner of the log directory to allow non-root OpenTSDB
      # daemons to create and rename log files.
      chown $TSD_USER: $LOG_DIR > /dev/null 2>&1
      chown $TSD_USER: ${LOG_FILE}*opentsdb.log > /dev/null 2>&1
      chown $TSD_USER: ${LOG_FILE}opentsdb.out > /dev/null 2>&1
      chown $TSD_USER: ${LOG_FILE}opentsdb.err > /dev/null 2>&1

      # Changes the owner of the lock, and the pid files to allow
      # non-root OpenTSDB daemons to run __INSTALL__/share/opentsdb/bin/opentsdb_restart.py.
      touch $LOCK_FILE && chown $TSD_USER: $LOCK_FILE
      touch $PID_FILE && chown $TSD_USER: $PID_FILE
      start-stop-daemon --start  -b --user "$TSD_USER" -c "$TSD_USER" \
        --make-pidfile --pidfile "$PID_FILE" \
        --startas /bin/bash -- -c "$DAEMON $DAEMON_OPTS" 
    else
      # Don't have to change user.
      start-stop-daemon --start  -b --user "$TSD_USER" -c "$TSD_USER" \
        --make-pidfile --pidfile "$PID_FILE" \
        --startas /bin/bash -- -c "$DAEMON $DAEMON_OPTS "
    fi
    retval=$?
    sleep 2
    echo
    [ $retval -eq 0 ] && touch $LOCK_FILE

    log_end_msg $?
  fi
  ;;

stop)
  log_action_begin_msg "Stopping TSD"
  set +e
  if [ -f "$PID_FILE" ]; then
    start-stop-daemon --stop --pidfile "$PID_FILE" \
      --user "$TSD_USER" --retry=TERM/20/KILL/5 >/dev/null
    if [ $? -eq 1 ]; then
      log_action_cont_msg "TSD is not running but pid file exists, cleaning up"
    elif [ $? -eq 3 ]; then
      PID="`cat $PID_FILE`"
      log_failure_msg "Failed to stop TSD (pid $PID)"
      exit 1
    fi
    rm -f "$PID_FILE"
    rm -f "$LOCK_FILE"
  else
    log_action_cont_msg "TSD was not running"
  fi
  log_action_end_msg 0
  set -e
  ;;

restart|force-reload)
  if [ -f "$PID_FILE" ]; then
    $0 stop
    sleep 1
  fi
  $0 start
  ;;
status)
  status_of_proc -p "$PID_FILE" "$DAEMON" "$NAME"
  ;;
*)
  echo "Usage: __INSTALL__/etc/init.d/opentsdb {start|stop|restart|status}"
  exit 1
  ;;
esac

exit 0
